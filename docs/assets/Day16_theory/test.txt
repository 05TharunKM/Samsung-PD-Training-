fvjxcdk nm
**Power planning:**
  
* From previous example, let's take the circuit and converted into a black box and denoted it as a macro/block
  
<p align="center">
  <img alt="ips.png" src="" width="500" >
</p>

* Let say there are 4 different macros/blocks containing driver, load, and etc that are usually available in a complete chip with different functionalities
* The voltage source was supplied for 4 blocks. Hence, the supply from the source will be not stable where it is impossible to put all the decoupling capacitors.
* Let's assume the orange line was 16 bit bus
* Logic 1 indicates that the capacitor is being charged to Vdd while logic 0 will be discharged to the Ground
* This 16 bit bus is connected with the inverter, so the output will be inverted from the input. Logic 1 will be discharged and while logic 0 will be charged.
* All the capacitors that were charged to volts will be discharged to 0 volt through single Ground tap point. This will cause a bounce in Ground tap point.
* If this bounce exceeds the noise margin level, it will reaches undefined state, where during that stage, the voltage might be changed from logic 1 to logic 0 and it is unpredictable 
* All capacitors which were '0' volt will have to charge to 'V' volts through single Vdd tap point. This will cause lowering of voltage at Vdd tap point
* The level of Ground Bounce and Voltage Droop will be increased due to the multiple process of tap points happened at the same time. 
* If this voltage droop is within the noise margin level, it will be enough but if it exceeded undefined region in the noise margin level, we will in danger zone

*Source: https://www.vlsisystemdesign.com/*

<p align="center">
  <img alt="ips.png" src="" width="500" >
</p>


* To fix this issue, we need to use multiple power supply (i.e. multiple  Vdd and Vss) instead of using 1 power supply only
* Multiple power supply will be sourced to the nearest block and it will prevent the block from being missed to get the power supply
* Therefore, all the logics will take the nearest power supply
* The driver and the load also can be brought closed to each other in 'L' sense

  
<p align="center">
  <img alt="ips.png" src="" width="500" >
</p>
  
**Pin placement and logical cell placement blockage:**

* Let's take several designs as examples that need to be implemented
* Along with the circuit, there are some pre-placed blocks as well that is being connected to the input circuit and being clocked out 
* There are 4 designs in total with different connections to be looking through in this section
* By merging all of the four designs, it will be a complete design 

<p align="center">
  <img alt="ips.png" src="" width="500" >
</p>

**Pin placement of the complete design**
  
* For the design plan, the input port is set to be on the LHS while the output port is set to be on the RHS
* Input ports and output ports are placed randomly since it is depending on our the design planning
* The pins are placed depending on the blocks
* No cells/flip flops can be placed on the block a, block b and block c area
* Clock ports which are CLK1, CLK2 and Clkout are bigger in size as compared to data ports since the clock is the ports that are driving all the cells and sending the signals to all flip flops
* Bigger the size, least the resistance. Therefore, clock ports need to be bigger in size to avoid resistance during signal transmission since clock plays an important role in sending the signals
  
*Source: https://www.vlsisystemdesign.com/*
  
<p align="center">
  <img alt="ips.png" src="" width="500" >
</p>

### Steps to run floorplan using OpenLANE
  
```
cd ../Desktop/work/tools/openlane_working_dir/openlane/configuration
vim README.md
```
  
![image](https://user-images.githubusercontent.com/118953917/212850404-c5806032-162e-46fd-afbf-ac313433a657.png)

```
vim floorplan.tcl
```
  
![image](https://user-images.githubusercontent.com/118953917/212851351-44319a52-c656-4d87-931a-aa8079ccdf0a.png)

```
cd ../Desktop/work/tools/openlane_working_dir/openlane/designs/picorv32a
vim config.tcl
```
  
![image](https://user-images.githubusercontent.com/118953917/212937440-c3afd92a-87d8-4ffb-8144-d98212cb3f76.png)
  
> In OpenLANE terminal
```
run_floorplan
```
  
![image](https://user-images.githubusercontent.com/118953917/212854551-c8c84876-318a-496b-947f-6c28f2d0de0a.png)

</details>

<details>
<summary>Lab 2: Review floorplan files and steps to view floorplan</summary>

### Review floorplan files and steps to view floorplan
  
```
cd ../Desktop/work/tools/openlane_working_dir/openlane/designs/picorv32a/runs/13-01_14-09/logs/floorplan
vim 4-ioPlacer.log
```
  
![image](https://user-images.githubusercontent.com/118953917/212937620-16ef4520-7e0c-48b9-b428-ef5b3ddc7dff.png)
  
```
cd ../Desktop/work/tools/openlane_working_dir/openlane/designs/picorv32a/runs/13-01_14-09/
vim config.tcl
```

![image](https://user-images.githubusercontent.com/118953917/212937722-d220fefa-48ec-4f46-bc95-954d11ae697b.png)
  
```
cd ../Desktop/work/tools/openlane_working_dir/openlane/designs/picorv32a/runs/13-01_14-09/results/floorplan
vim picorv32a.floorplan.def
```

![image](https://user-images.githubusercontent.com/118953917/212937842-402075ea-8ab9-4028-b6dd-f76e3c6e4e80.png)

</details>

<details>
<summary>Lab 3: Review floorplan layout in Magic</summary>

### Review floorplan layout in Magic
  
```
magic -T ~/Desktop/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/magic/sky130A.tech lef read ../../tmp/merged.lef def read picorv32a.floorplan.def &
```
  
![image](https://user-images.githubusercontent.com/118953917/213065626-ef4a7930-e0ba-45e2-a747-005fcb1677f4.png)
  
![image](https://user-images.githubusercontent.com/118953917/213065684-9726f790-fd91-44d4-b1b3-96d2167c6e5c.png)
  
</details>

### Library Binding and Placement
<details>
  <summary>Lecture 1: Netlist binding and initial place design</summary>
 
### Netlist binding and initial place design

* Usually, the combinational logic gate will have its standard shape like AND gate, inverter and etc.
* But, in reality, the combinational logic gate will be converted to the box. The physical gate will be changed to the physical dimension.
* Therefore, all the gates will be removed and changed as in the figure
* Library: the place where we can find all the boxes and it has timing information of the delay of each gate
* Library also can be separated into sub library i.e. the first library consisting of the shape and size while the second library only consists of delay information.
* Library offers several options of library in same cell depending on its timing conditions and its available spaces in the floorplan. The bigger the cell size, the lesser the resistance 
* Hence, we have different flavours of library and we can pick up the desired library based upon the requirements
  
![image](https://user-images.githubusercontent.com/118953917/212942911-f3f8c138-8b65-4be0-917d-d591f6e443ca.png)

* The physical view of logic gates will be placed into the floorplan 
* We need to bind the netlist of the physical cells where the cells will have a real view of a box with a specific width and height
* These boxes will be available in the library, which will be having the width and height of the cells, as well as other details such as delay or required information, as well as the flavor of the cells.
* The arrangements in the floorplan is decided by taking into considerations of the connections of the physical cells i.e. where is the nearest locations between inputs and outputs and etc.
* During placement stage, we must ensure that the area used for the black boxes and decap cells do not have any cells inserted that can cause overlapping. The placement needs to be timing conscious as well to not make the routing long.
  
![image](https://user-images.githubusercontent.com/118953917/212945356-a4f1298a-b3d0-4b57-94b0-5bd0ef70acd1.png)

</details>

<details>
  <summary>Lecture 2:  Optimize placement using estimated wire-length and capacitance</summary>
 
###  Optimize placement using estimated wire-length and capacitance
  
**Optimizing placement**
  
* Optimizing is done by some estimations, let's take Din2 to FF1 in the figure as example. 
* As we can see, the route across Din2 to FF1 would make the data slew (long distance) where higher capacitance makes the amount needed to charge the capacitance becomes high, resulting in worst slew (transition).
* Before routing, we estimate the wire length and capacitance where based on that, the repeaters are inserted.
* In this case, the buffer is added (to lower the capacitance) and will act as repeaters that recondition the signals and making new signals or replicate the signal woth no distortion. However, more repeaters would results in loosing some data. 

![image](https://user-images.githubusercontent.com/118953917/213071175-5785104a-479a-4e24-955f-14a7c9a89c61.png)

</details>

<details>
  <summary>Lecture 3:  Final placement optimization</summary>
 
###  Final placement optimization

* Buffers are added due to its signal transmission length. For example, the length between FF1 and Din4 is to high, so we need the repeaters to recondition the signal and send it to FF1.
* From FF1 to 1, the length is good enough but since we will going across the other FF and buffer, therefore we need to make it on separated layer. 
* From 1 to 2 is a huge gap. Hence, we consider to put the buffer.
* The more the gate and FF closed to each other, the lower delay.
* Moreover, we need to do timing setup checking to see whether our placement acceptable/not as well as identifying the specifications have been met/not.

![image](https://user-images.githubusercontent.com/118953917/213074569-4be5098a-798d-438d-b07a-de873c8d3c1c.png)

</details>

<details>
  <summary>Lecture 4:  Need for libraries and characterization</summary>
 
###  Libraries characterization and modelling

**Part 1: Concepts and theory - NLDM, CCS timing, power and noise characterization**
  
Steps in mcharacterizing and modelling 
  
![image](https://user-images.githubusercontent.com/118953917/213076122-994fd13f-0d90-4e4c-9913-cbaa9ea1e5df.png)

* Common thing across all stages "GATES or Cells"
* Those things in the library must be categorized as library and making sure that the tools will understand what are the gates/cells are 
* To make the tool understands, we have to design, chategorize and model each gate/cell in such a way that the tool understand using EDA tool
  
![image](https://user-images.githubusercontent.com/118953917/213076726-0596bace-b53c-449b-a4b7-20c8dc8a2fac.png)

  
</details>

<details>
  <summary>Lab 1:  Congestion aware placement using RePlAce</summary>
 
###  Congestion aware placement using RePlAce

* Global placement: assigns general locations to movable objects. It used to reduce wire length
* Detailed placement: refines object locations to legal cell sites and enforces non-overlapping constraints 
* The detailed locations enable more accurate estimations of the circuit delay for the purpose of timing optimization
* Legalization is an essential step where the overlaps between gates/macros must be removed

> In openLANE
```
run_placement
```
  
* Half Parameter Wire Length (HPWL) is applied to reduce wire length
  
![image](https://user-images.githubusercontent.com/118953917/213079569-86f77657-1e09-4c97-ba7d-c29b88533f67.png)
  
> In terminal
```
cd ~/Desktop/work/tools/openlane_working_dir/openlane/designs/picorv32a/runs/13-01_14-09/results/placement
magic -T ~/Desktop/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/magic/sky130A.tech lef read ../../tmp/merged.lef def read picorv32a.placement.def &
```
  
![image](https://user-images.githubusercontent.com/118953917/213080197-b9144a7c-4ab5-4c3e-bc8c-76165896c4b5.png)

</details>

### Cell design and characterization flows
<details>
  <summary>Lecture 1:  Inputs for cell design flow</summary>
 
###  Inputs for cell design flow
  
* Combinational logics are referred as standard cells and those standard cells will be designed, characterized and modelled in a library
* Library is the place where we keep all the standard cells or any other collaterals
  
![image](https://user-images.githubusercontent.com/118953917/213081403-f3240e5f-44bb-4861-beb6-e1d8dde3e15f.png)

* A library got different functionalities with different sizes and flavours 
* It also contains standard cells with different threshold voltage
  
![image](https://user-images.githubusercontent.com/118953917/213081939-12bcef17-4c98-437d-ba93-dd44d7202990.png)

**Cell design flow**
  
![image](https://user-images.githubusercontent.com/118953917/213101525-135764db-db69-42f9-ab02-a49d2d282666.png)
  
![image](https://user-images.githubusercontent.com/118953917/213084248-7061eaf8-bf49-41e9-bd60-ac8d2601e6e8.png)

</details>

<details>
  <summary>Lecture 2:  Circuit design step</summary>
 
###  Circuit design step

**Cont. Inputs for cell design flow**
  
* Low the drive strength makes it very difficult to drive the huge/long wire
* Drive strength would decides the cell rate while the cell height decides the separation among the power and ground grid
* Library developer will design different flavour of cells based on the supply voltage that is being provided by the top-level as well as taking care of its noise margin 
  
![image](https://user-images.githubusercontent.com/118953917/213095296-0c4638b8-aeeb-43f5-9936-c784db2f222a.png)
  
**Circuit design step**

![image](https://user-images.githubusercontent.com/118953917/213097102-e5c1145c-7fbe-4851-8b07-25170cf06a0b.png)

</details>

<details>
  <summary>Lecture 3:  Layout design step</summary>
 
###  Layout design step

* After getting pmos and nmos network graphy diagram, we need to obtain Euler's path where it is a path that is being traced only once
* Once Euler's path has been obtained, we need to draw a stick diagram of it 
* The drawn stick diagram is then needs to be converted into a proper layout based upon the rules mentioned in pdks and design characterization in previous stages
* The completed layout design will then be inserted into the tool (i.e. magic open source tool) 
* The next step of the design flow is to extract the parasitic (resistance & capacitance of the element) of the layout and characterize them in terms of timing 
* The output of the design would be in terms of GDSII, LEF, and extracted spice netlist
* The final step is we need to characterize the design to get the timing noise, power .libs and its function
  
![image](https://user-images.githubusercontent.com/118953917/213101299-d937018e-178f-4bfc-92b3-de199c3baf55.png)

</details>

<details>
  <summary>Lecture 4:  Typical characterization flow</summary>
 
###  Typical characterization flow

**Steps in characterizing the design**
  
1. Review model file
2. Review extracted SPICE netlist 
3. Define the behavior of the buffers
4. Review sub-circuit of inverters
5. Attach necessary power sources
6. Apply the stimulus
7. Provide necessary output capacitance
8. Provide necessary command (using trans/dc simulations)

* All the steps will be set as one configuration file to a characterization software called GUNA and it will generate the desired timing, noise, power .libs and function 
  
![image](https://user-images.githubusercontent.com/118953917/213107389-c4a98043-adda-44d7-ad9a-7798396dee3c.png)

</details>

### General timing characterization parameters
<details>
  <summary>Lecture 1: Timing threshold definitions</summary>
 
### Timing characterization
	
![image](https://user-images.githubusercontent.com/118953917/213112154-13441ad3-95ca-48d0-b8f2-90150fa96b32.png)
  
* Slew low rise: defines the lowest state (0V) of the power supply which is closer to zero. Typical value is about 20% from bottom power supply. But this is not enough to calculate the slew, we need the slew high rise threshold as well.
* Slew high rise: typical value is about 20% from the top of power supply. To calculate the amount of slew, take the timing difference among those 2 variables
  
![image](https://user-images.githubusercontent.com/118953917/213134921-021a6cf2-dec0-4a7e-867d-31cecbf1ef48.png)

* Similar definition applies for the falling waveform
* We also have thresholds for the delays 
* In rise threshold: refers to the best defined point to calculate the delay.
* Out rise threshold: at 50% mark, if we want to calculate the delay of the cell, we need to take the time period between the 2 points.
* Similarly, for the fall waveform, the definition applies the same as rise waveform but in the form of fall waveform
  
![image](https://user-images.githubusercontent.com/118953917/213123100-b828d238-5216-456a-abf5-34570b8a32c7.png)

</details>

<details>
  <summary>Lecture 2: Propagation delay and transition time</summary>
 
### Propagation delay and transition time

**Propagation delay**
  
* The propagation delay should be a positive value, it should not be a negative value 
* Therefore, the threshold point need to be set properly 
  
![image](https://user-images.githubusercontent.com/118953917/213126123-23f1bc34-6798-4721-b3e6-5dcddcbc998b.png)

* Another example if by chance the threshold point moves, and the output comes before the input, the delay will become a negative value, which should not be seen, and would be a result of poor choice of threshold point.
* Referring to the example below, the wire delay seems to be high for the input, resulting in huge slew (red line). This might be because the two inverters are being placed far apart from each other
* Eventhough the threshold points have been selected properly, it still gives a negative delay, so the design of the circuit is also very important
  
![image](https://user-images.githubusercontent.com/118953917/213128155-72855135-df84-49a6-8c34-26c26604ef8d.png)

**Transition time**
  
![image](https://user-images.githubusercontent.com/118953917/213130139-157ef571-d597-47bd-abae-66ff4739a7dc.png)

  </details>

## Day-17

### Topic: Design and characterise one library cell using Layout tool and spice simulator

### Labs for CMOS inverter ngspice simulations
<details>
  <summary>Lab 1:  IO placer revision</summary>
 
### Continue previous lab session (Day 16)
  
> In terminal
```
cd ~/Desktop/work/tools/openlane_working_dir/openlane/configuration
vim README.md
vim floorplan.tcl
```
> In openLANE
```
set ::env(FP_IO_MODE) 2
run_floorplan
```
  
![image](https://user-images.githubusercontent.com/118953917/213461720-580d1387-3c86-4491-ab15-2eb11e06c7a3.png)
  
```
cd ~/Desktop/work/tools/openlane_working_dir/openlane/designs/picorv32a/runs/13-01_14-09/results/floorplan
magic -T ~/Desktop/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/magic/sky130A.tech lef read ../../tmp/merged.lef def read picorv32a.floorplan.def &
```
  
![image](https://user-images.githubusercontent.com/118953917/213464391-330846dc-721c-4027-97c9-3e3632d4b345.png)

</details>
